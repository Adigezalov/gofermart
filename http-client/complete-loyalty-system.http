### 🎯 ПОЛНЫЙ ЦИКЛ СИСТЕМЫ ЛОЯЛЬНОСТИ ГОФЕРМАРТ
### Этот файл демонстрирует весь функционал системы с автоматическим сохранением токенов
### Выполняйте запросы по порядку для полного тестирования

### ============================================================================
### 🚀 ЭТАП 1: РЕГИСТРАЦИЯ И АВТОРИЗАЦИЯ
### ============================================================================

### 1.1 Регистрация нового пользователя
POST http://localhost:8080/api/user/register
Content-Type: application/json

{
  "login": "loyaltyuser_{{$timestamp}}",
  "password": "securepass123"
}

> {%
    // Автоматически сохраняем токены после регистрации
    if (response.status === 200) {
        client.global.set("access_token", response.body.access_token);
        client.global.set("refresh_token", response.body.refresh_token);
        client.global.set("user_login", "loyaltyuser_" + new Date().getTime());
        client.log("✅ Пользователь зарегистрирован, токены сохранены");
        client.log("🔑 Access token: " + response.body.access_token.substring(0, 20) + "...");
    } else {
        client.log("❌ Ошибка регистрации: " + response.status);
    }
%}

### 1.2 Проверка авторизации
GET http://localhost:8080/api/health/auth
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.log("✅ Авторизация работает корректно");
    } else {
        client.log("❌ Проблема с авторизацией: " + response.status);
    }
%}

### ============================================================================
### 💰 ЭТАП 2: ПРОВЕРКА НАЧАЛЬНОГО БАЛАНСА
### ============================================================================

### 2.1 Получение начального баланса (должен быть 0/0)
GET http://localhost:8080/api/user/balance
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.global.set("current_balance", response.body.current);
        client.global.set("withdrawn_balance", response.body.withdrawn);
        client.log("✅ Начальный баланс: " + response.body.current + " (текущий), " + response.body.withdrawn + " (потрачено)");
    } else {
        client.log("❌ Ошибка получения баланса: " + response.status);
    }
%}

### 2.2 Проверка пустой истории списаний (должен быть 204)
GET http://localhost:8080/api/user/withdrawals
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 204) {
        client.log("✅ История списаний пуста (как и ожидалось)");
    } else if (response.status === 200) {
        client.log("ℹ️ В истории уже есть операции: " + JSON.stringify(response.body));
    } else {
        client.log("❌ Ошибка получения истории: " + response.status);
    }
%}

### ============================================================================
### 📦 ЭТАП 3: ЗАГРУЗКА ЗАКАЗОВ
### ============================================================================

### 3.1 Загрузка первого заказа
POST http://localhost:8080/api/user/orders
Content-Type: text/plain
Authorization: Bearer {{access_token}}

79927398713

> {%
    if (response.status === 202) {
        client.log("✅ Первый заказ принят в обработку");
        client.global.set("order1", "79927398713");
    } else if (response.status === 200) {
        client.log("ℹ️ Первый заказ уже был загружен ранее");
    } else {
        client.log("❌ Ошибка загрузки первого заказа: " + response.status);
    }
%}

### 3.2 Загрузка второго заказа
POST http://localhost:8080/api/user/orders
Content-Type: text/plain
Authorization: Bearer {{access_token}}

49927398716

> {%
    if (response.status === 202) {
        client.log("✅ Второй заказ принят в обработку");
        client.global.set("order2", "49927398716");
    } else if (response.status === 200) {
        client.log("ℹ️ Второй заказ уже был загружен ранее");
    } else {
        client.log("❌ Ошибка загрузки второго заказа: " + response.status);
    }
%}

### 3.3 Проверка списка заказов
GET http://localhost:8080/api/user/orders
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.log("✅ Список заказов получен:");
        response.body.forEach((order, index) => {
            client.log(`   ${index + 1}. Заказ ${order.number}: ${order.status}${order.accrual ? ` (${order.accrual} баллов)` : ''}`);
        });

        // Сохраняем информацию о заказах для дальнейшего использования
        client.global.set("orders_list", JSON.stringify(response.body));
    } else if (response.status === 204) {
        client.log("ℹ️ У пользователя пока нет заказов");
    } else {
        client.log("❌ Ошибка получения списка заказов: " + response.status);
    }
%}

### ============================================================================
### ⏳ ЭТАП 4: ОЖИДАНИЕ ОБРАБОТКИ СИСТЕМОЙ НАЧИСЛЕНИЙ
### ============================================================================

### 4.1 Пауза для обработки заказов (30-60 секунд)
### Accrual worker проверяет заказы каждые 30 секунд
### В реальном сценарии подождите 1-2 минуты перед следующими запросами

### 4.2 Проверка обновленного списка заказов
GET http://localhost:8080/api/user/orders
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.log("🔄 Обновленный список заказов:");
        let totalAccrual = 0;
        response.body.forEach((order, index) => {
            const accrualText = order.accrual ? ` (${order.accrual} баллов)` : '';
            client.log(`   ${index + 1}. Заказ ${order.number}: ${order.status}${accrualText}`);
            if (order.accrual) {
                totalAccrual += order.accrual;
            }
        });
        client.global.set("total_accrual", totalAccrual);
        client.log(`💰 Общая сумма начислений: ${totalAccrual} баллов`);
    }
%}

### 4.3 Проверка обновленного баланса
GET http://localhost:8080/api/user/balance
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        const oldBalance = parseFloat(client.global.get("current_balance") || "0");
        const newBalance = response.body.current;
        const difference = newBalance - oldBalance;

        client.log(`💰 Обновленный баланс: ${newBalance} (было: ${oldBalance})`);
        if (difference > 0) {
            client.log(`🎉 Начислено ${difference} баллов!`);
        } else if (difference === 0) {
            client.log("⏳ Начисления еще не обработаны, попробуйте позже");
        }

        client.global.set("current_balance", newBalance);
    }
%}

### ============================================================================
### 💸 ЭТАП 5: СПИСАНИЕ БАЛЛОВ
### ============================================================================

### 5.1 Попытка списать баллы при нулевом балансе (тест ошибки 402)
POST http://localhost:8080/api/user/balance/withdraw
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "order": "12345678903",
  "sum": 100
}

> {%
    if (response.status === 402) {
        client.log("✅ Корректно обработана ошибка недостатка средств (402)");
    } else if (response.status === 200) {
        client.log("✅ Списание прошло успешно (достаточно средств)");
    } else {
        client.log("❌ Неожиданный статус при списании: " + response.status);
    }
%}

### 5.2 Списание меньшей суммы (если есть баллы)
POST http://localhost:8080/api/user/balance/withdraw
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "order": "37828934750",
  "sum": 50
}

> {%
    if (response.status === 200) {
        client.log("✅ Успешно списано 50 баллов");
        client.global.set("withdrawal_made", "true");
    } else if (response.status === 402) {
        client.log("ℹ️ Недостаточно средств для списания 50 баллов");
    } else {
        client.log("❌ Ошибка при списании: " + response.status);
    }
%}

### ============================================================================
### 📊 ЭТАП 6: ПРОВЕРКА РЕЗУЛЬТАТОВ
### ============================================================================

### 6.1 Финальная проверка баланса
GET http://localhost:8080/api/user/balance
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.log("📊 ФИНАЛЬНЫЙ БАЛАНС:");
        client.log(`   💰 Текущий баланс: ${response.body.current} баллов`);
        client.log(`   💸 Потрачено всего: ${response.body.withdrawn} баллов`);
    }
%}

### 6.2 Проверка истории списаний
GET http://localhost:8080/api/user/withdrawals
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.log("📋 ИСТОРИЯ СПИСАНИЙ:");
        response.body.forEach((withdrawal, index) => {
            const date = new Date(withdrawal.processed_at).toLocaleString();
            client.log(`   ${index + 1}. Заказ ${withdrawal.order}: ${withdrawal.sum} баллов (${date})`);
        });
    } else if (response.status === 204) {
        client.log("📋 История списаний пуста");
    }
%}

### 6.3 Финальный список заказов
GET http://localhost:8080/api/user/orders
Authorization: Bearer {{access_token}}

> {%
    if (response.status === 200) {
        client.log("📦 ФИНАЛЬНЫЙ СПИСОК ЗАКАЗОВ:");
        response.body.forEach((order, index) => {
            const accrualText = order.accrual ? ` → ${order.accrual} баллов` : '';
            const date = new Date(order.uploaded_at).toLocaleString();
            client.log(`   ${index + 1}. ${order.number} [${order.status}]${accrualText} (${date})`);
        });
    }
%}

### ============================================================================
### 🧪 ЭТАП 7: ТЕСТИРОВАНИЕ ОШИБОК
### ============================================================================

### 7.1 Тест неверного номера заказа (422)
POST http://localhost:8080/api/user/balance/withdraw
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "order": "1234567890",
  "sum": 10
}

> {%
    if (response.status === 422) {
        client.log("✅ Корректно обработана ошибка неверного номера заказа (422)");
    } else {
        client.log("❌ Неожиданный статус для неверного номера: " + response.status);
    }
%}

### 7.2 Тест запроса без авторизации (401)
GET http://localhost:8080/api/user/balance

> {%
    if (response.status === 401) {
        client.log("✅ Корректно обработана ошибка отсутствия авторизации (401)");
    } else {
        client.log("❌ Неожиданный статус без авторизации: " + response.status);
    }
%}

### ============================================================================
### 🎉 ЗАВЕРШЕНИЕ ТЕСТИРОВАНИЯ
### ============================================================================

### ✅ Регистрация и авторизация пользователя
### ✅ Проверка начального баланса
### ✅ Загрузка заказов
### ✅ Ожидание обработки системой начислений
### ✅ Проверка начисленных баллов
### ✅ Списание баллов
### ✅ Проверка истории операций
### ✅ Тестирование обработки ошибок

### 📝 ПРИМЕЧАНИЯ:
### • Токены автоматически сохраняются и используются во всех запросах
### • Accrual worker обрабатывает заказы каждые 30 секунд
### • Для полного тестирования начислений нужен запущенный accrual сервис
### • Все операции логируются в консоль для удобства отслеживания